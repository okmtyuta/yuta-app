---
import { getCollection, type CollectionEntry } from 'astro:content'
import Layout from '../../layouts/Layout.astro'
import { getPostThumbnail } from '../../shared/get-post-thumbnail'
import { PostsService } from '../../services/posts/posts.service'

export async function getStaticPaths() {
  const service = await PostsService.init()
  const posts = await getCollection('posts')

  return posts.map((post) => {
    const seriePosts = service.findBySeries([post.data.serie])

    return {
      params: {
        slug: post.slug
      },
      props: { post, seriePosts }
    }
  })
}

type Props = {
  post: CollectionEntry<'posts'>
  seriePosts: CollectionEntry<'posts'>[]
}
const { post } = Astro.props

const thumbnail = getPostThumbnail(post.slug, null)

const thumbnail_src = (await thumbnail()).default.src

const { Content } = await post.render()
---

<Layout
  title={post.data.title}
  description={post.data.description}
  og={{
    image: `https://note.yuta.app/${thumbnail_src}`
  }}
>
  <h1 id="title">{post.data.title}</h1>
  <h6>{post.data.postedAt.toISOString().slice(0, 10)}</h6>

  {
    post.data.serie && (
      <div class="series">
        <span>Series</span>
        <span>
          <a href={`/posts/series/${post.data.serie}`}>{post.data.serie}</a>
        </span>
      </div>
    )
  }

  {
    post.data.tags.length > 0 && (
      <div class="tags">
        <span>Tags</span>
        {post.data.tags.map((tag) => {
          return (
            <span>
              <a href={`/posts/tags/${tag}`}>{tag}</a>
            </span>
          )
        })}
      </div>
    )
  }

  <Content />
</Layout>

<style>
  .series,
  .tags {
    display: flex;
    gap: 10px;
  }
</style>
